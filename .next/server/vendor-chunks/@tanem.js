"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanem";
exports.ids = ["vendor-chunks/@tanem"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanem/svg-injector/dist/svg-injector.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanem/svg-injector/dist/svg-injector.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SVGInjector: () => (/* binding */ SVGInjector)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@tanem/svg-injector/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var content_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! content-type */ \"(ssr)/./node_modules/content-type/index.js\");\n\n\nvar cache = new Map();\nvar cloneSvg = function cloneSvg(sourceSvg) {\n    return sourceSvg.cloneNode(true);\n};\nvar isLocal = function isLocal() {\n    return window.location.protocol === \"file:\";\n};\nvar makeAjaxRequest = function makeAjaxRequest(url, httpRequestWithCredentials, callback) {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.onreadystatechange = function() {\n        try {\n            if (!/\\.svg/i.test(url) && httpRequest.readyState === 2) {\n                var contentType = httpRequest.getResponseHeader(\"Content-Type\");\n                if (!contentType) {\n                    throw new Error(\"Content type not found\");\n                }\n                var type = (0,content_type__WEBPACK_IMPORTED_MODULE_0__.parse)(contentType).type;\n                if (!(type === \"image/svg+xml\" || type === \"text/plain\")) {\n                    throw new Error(\"Invalid content type: \".concat(type));\n                }\n            }\n            if (httpRequest.readyState === 4) {\n                if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n                    throw new Error(isLocal() ? \"Note: SVG injection ajax calls do not work locally without \" + \"adjusting security settings in your browser. Or consider \" + \"using a local webserver.\" : \"Unable to load SVG file: \" + url);\n                }\n                if (httpRequest.status === 200 || isLocal() && httpRequest.status === 0) {\n                    callback(null, httpRequest);\n                } else {\n                    throw new Error(\"There was a problem injecting the SVG: \" + httpRequest.status + \" \" + httpRequest.statusText);\n                }\n            }\n        } catch (error) {\n            httpRequest.abort();\n            if (error instanceof Error) {\n                callback(error, httpRequest);\n            } else {\n                throw error;\n            }\n        }\n    };\n    httpRequest.open(\"GET\", url);\n    httpRequest.withCredentials = httpRequestWithCredentials;\n    if (httpRequest.overrideMimeType) {\n        httpRequest.overrideMimeType(\"text/xml\");\n    }\n    httpRequest.send();\n};\nvar requestQueue = {};\nvar queueRequest = function queueRequest(url, callback) {\n    requestQueue[url] = requestQueue[url] || [];\n    requestQueue[url].push(callback);\n};\nvar processRequestQueue = function processRequestQueue(url) {\n    var _loop_1 = function _loop_1(i, len) {\n        setTimeout(function() {\n            if (Array.isArray(requestQueue[url])) {\n                var cacheValue = cache.get(url);\n                var callback = requestQueue[url][i];\n                if (cacheValue instanceof SVGSVGElement) {\n                    callback(null, cloneSvg(cacheValue));\n                }\n                if (cacheValue instanceof Error) {\n                    callback(cacheValue);\n                }\n                if (i === requestQueue[url].length - 1) {\n                    delete requestQueue[url];\n                }\n            }\n        }, 0);\n    };\n    for(var i = 0, len = requestQueue[url].length; i < len; i++){\n        _loop_1(i);\n    }\n};\nvar loadSvgCached = function loadSvgCached(url, httpRequestWithCredentials, callback) {\n    if (cache.has(url)) {\n        var cacheValue = cache.get(url);\n        if (cacheValue === undefined) {\n            queueRequest(url, callback);\n            return;\n        }\n        if (cacheValue instanceof SVGSVGElement) {\n            callback(null, cloneSvg(cacheValue));\n            return;\n        }\n    }\n    cache.set(url, undefined);\n    queueRequest(url, callback);\n    makeAjaxRequest(url, httpRequestWithCredentials, function(error, httpRequest) {\n        var _a;\n        if (error) {\n            cache.set(url, error);\n        } else if (((_a = httpRequest.responseXML) === null || _a === void 0 ? void 0 : _a.documentElement) instanceof SVGSVGElement) {\n            cache.set(url, httpRequest.responseXML.documentElement);\n        }\n        processRequestQueue(url);\n    });\n};\nvar loadSvgUncached = function loadSvgUncached(url, httpRequestWithCredentials, callback) {\n    makeAjaxRequest(url, httpRequestWithCredentials, function(error, httpRequest) {\n        var _a;\n        if (error) {\n            callback(error);\n        } else if (((_a = httpRequest.responseXML) === null || _a === void 0 ? void 0 : _a.documentElement) instanceof SVGSVGElement) {\n            callback(null, httpRequest.responseXML.documentElement);\n        }\n    });\n};\nvar idCounter = 0;\nvar uniqueId = function uniqueId() {\n    return ++idCounter;\n};\nvar injectedElements = [];\nvar ranScripts = {};\nvar svgNamespace = \"http://www.w3.org/2000/svg\";\nvar xlinkNamespace = \"http://www.w3.org/1999/xlink\";\nvar injectElement = function injectElement(el, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, callback) {\n    var elUrl = el.getAttribute(\"data-src\") || el.getAttribute(\"src\");\n    if (!elUrl) {\n        callback(new Error(\"Invalid data-src or src attribute\"));\n        return;\n    }\n    if (injectedElements.indexOf(el) !== -1) {\n        injectedElements.splice(injectedElements.indexOf(el), 1);\n        el = null;\n        return;\n    }\n    injectedElements.push(el);\n    el.setAttribute(\"src\", \"\");\n    var loadSvg = cacheRequests ? loadSvgCached : loadSvgUncached;\n    loadSvg(elUrl, httpRequestWithCredentials, function(error, svg) {\n        if (!svg) {\n            injectedElements.splice(injectedElements.indexOf(el), 1);\n            el = null;\n            callback(error);\n            return;\n        }\n        var elId = el.getAttribute(\"id\");\n        if (elId) {\n            svg.setAttribute(\"id\", elId);\n        }\n        var elTitle = el.getAttribute(\"title\");\n        if (elTitle) {\n            svg.setAttribute(\"title\", elTitle);\n        }\n        var elWidth = el.getAttribute(\"width\");\n        if (elWidth) {\n            svg.setAttribute(\"width\", elWidth);\n        }\n        var elHeight = el.getAttribute(\"height\");\n        if (elHeight) {\n            svg.setAttribute(\"height\", elHeight);\n        }\n        var mergedClasses = Array.from(new Set((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (svg.getAttribute(\"class\") || \"\").split(\" \"), true), [\n            \"injected-svg\"\n        ], false), (el.getAttribute(\"class\") || \"\").split(\" \"), true))).join(\" \").trim();\n        svg.setAttribute(\"class\", mergedClasses);\n        var elStyle = el.getAttribute(\"style\");\n        if (elStyle) {\n            svg.setAttribute(\"style\", elStyle);\n        }\n        svg.setAttribute(\"data-src\", elUrl);\n        var elData = [].filter.call(el.attributes, function(at) {\n            return /^data-\\w[\\w-]*$/.test(at.name);\n        });\n        Array.prototype.forEach.call(elData, function(dataAttr) {\n            if (dataAttr.name && dataAttr.value) {\n                svg.setAttribute(dataAttr.name, dataAttr.value);\n            }\n        });\n        if (renumerateIRIElements) {\n            var iriElementsAndProperties_1 = {\n                clipPath: [\n                    \"clip-path\"\n                ],\n                \"color-profile\": [\n                    \"color-profile\"\n                ],\n                cursor: [\n                    \"cursor\"\n                ],\n                filter: [\n                    \"filter\"\n                ],\n                linearGradient: [\n                    \"fill\",\n                    \"stroke\"\n                ],\n                marker: [\n                    \"marker\",\n                    \"marker-start\",\n                    \"marker-mid\",\n                    \"marker-end\"\n                ],\n                mask: [\n                    \"mask\"\n                ],\n                path: [],\n                pattern: [\n                    \"fill\",\n                    \"stroke\"\n                ],\n                radialGradient: [\n                    \"fill\",\n                    \"stroke\"\n                ]\n            };\n            var element_1;\n            var elements_1;\n            var properties_1;\n            var currentId_1;\n            var newId_1;\n            Object.keys(iriElementsAndProperties_1).forEach(function(key) {\n                element_1 = key;\n                properties_1 = iriElementsAndProperties_1[key];\n                elements_1 = svg.querySelectorAll(element_1 + \"[id]\");\n                var _loop_1 = function _loop_1(a, elementsLen) {\n                    currentId_1 = elements_1[a].id;\n                    newId_1 = currentId_1 + \"-\" + uniqueId();\n                    var referencingElements;\n                    Array.prototype.forEach.call(properties_1, function(property) {\n                        referencingElements = svg.querySelectorAll(\"[\" + property + '*=\"' + currentId_1 + '\"]');\n                        for(var b = 0, referencingElementLen = referencingElements.length; b < referencingElementLen; b++){\n                            var attrValue = referencingElements[b].getAttribute(property);\n                            if (attrValue && !attrValue.match(new RegExp('url\\\\(\"?#' + currentId_1 + '\"?\\\\)'))) {\n                                continue;\n                            }\n                            referencingElements[b].setAttribute(property, \"url(#\" + newId_1 + \")\");\n                        }\n                    });\n                    var allLinks = svg.querySelectorAll(\"[*|href]\");\n                    var links = [];\n                    for(var c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++){\n                        var href = allLinks[c].getAttributeNS(xlinkNamespace, \"href\");\n                        if (href && href.toString() === \"#\" + elements_1[a].id) {\n                            links.push(allLinks[c]);\n                        }\n                    }\n                    for(var d = 0, linksLen = links.length; d < linksLen; d++){\n                        links[d].setAttributeNS(xlinkNamespace, \"href\", \"#\" + newId_1);\n                    }\n                    elements_1[a].id = newId_1;\n                };\n                for(var a = 0, elementsLen = elements_1.length; a < elementsLen; a++){\n                    _loop_1(a);\n                }\n            });\n        }\n        svg.removeAttribute(\"xmlns:a\");\n        var scripts = svg.querySelectorAll(\"script\");\n        var scriptsToEval = [];\n        var script;\n        var scriptType;\n        for(var i = 0, scriptsLen = scripts.length; i < scriptsLen; i++){\n            scriptType = scripts[i].getAttribute(\"type\");\n            if (!scriptType || scriptType === \"application/ecmascript\" || scriptType === \"application/javascript\" || scriptType === \"text/javascript\") {\n                script = scripts[i].innerText || scripts[i].textContent;\n                if (script) {\n                    scriptsToEval.push(script);\n                }\n                svg.removeChild(scripts[i]);\n            }\n        }\n        if (scriptsToEval.length > 0 && (evalScripts === \"always\" || evalScripts === \"once\" && !ranScripts[elUrl])) {\n            for(var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++){\n                new Function(scriptsToEval[l])(window);\n            }\n            ranScripts[elUrl] = true;\n        }\n        var styleTags = svg.querySelectorAll(\"style\");\n        Array.prototype.forEach.call(styleTags, function(styleTag) {\n            styleTag.textContent += \"\";\n        });\n        svg.setAttribute(\"xmlns\", svgNamespace);\n        svg.setAttribute(\"xmlns:xlink\", xlinkNamespace);\n        beforeEach(svg);\n        if (!el.parentNode) {\n            injectedElements.splice(injectedElements.indexOf(el), 1);\n            el = null;\n            callback(new Error(\"Parent node is null\"));\n            return;\n        }\n        el.parentNode.replaceChild(svg, el);\n        injectedElements.splice(injectedElements.indexOf(el), 1);\n        el = null;\n        callback(null, svg);\n    });\n};\nvar SVGInjector = function SVGInjector(elements, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.afterAll, afterAll = _c === void 0 ? function() {\n        return undefined;\n    } : _c, _d = _b.afterEach, afterEach = _d === void 0 ? function() {\n        return undefined;\n    } : _d, _e = _b.beforeEach, beforeEach = _e === void 0 ? function() {\n        return undefined;\n    } : _e, _f = _b.cacheRequests, cacheRequests = _f === void 0 ? true : _f, _g = _b.evalScripts, evalScripts = _g === void 0 ? \"never\" : _g, _h = _b.httpRequestWithCredentials, httpRequestWithCredentials = _h === void 0 ? false : _h, _j = _b.renumerateIRIElements, renumerateIRIElements = _j === void 0 ? true : _j;\n    if (elements && \"length\" in elements) {\n        var elementsLoaded_1 = 0;\n        for(var i = 0, j = elements.length; i < j; i++){\n            injectElement(elements[i], evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function(error, svg) {\n                afterEach(error, svg);\n                if (elements && \"length\" in elements && elements.length === ++elementsLoaded_1) {\n                    afterAll(elementsLoaded_1);\n                }\n            });\n        }\n    } else if (elements) {\n        injectElement(elements, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function(error, svg) {\n            afterEach(error, svg);\n            afterAll(1);\n            elements = null;\n        });\n    } else {\n        afterAll(0);\n    }\n};\n //# sourceMappingURL=svg-injector.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanem/svg-injector/dist/svg-injector.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanem/svg-injector/node_modules/tslib/tslib.es6.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@tanem/svg-injector/node_modules/tslib/tslib.es6.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\n;\nfunction __runInitializers(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++){\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n}\n;\nfunction __propKey(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nfunction __setFunctionName(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\n;\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\n/** @deprecated */ function __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n/** @deprecated */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction __addDisposableResource(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) {\n        env.stack.push({\n            async: true\n        });\n    }\n    return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction __disposeResources(env) {\n    function fail(e) {\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    function next() {\n        while(env.stack.length){\n            var rec = env.stack.pop();\n            try {\n                var result = rec.dispose && rec.dispose.call(rec.value);\n                if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    __extends,\n    __assign,\n    __rest,\n    __decorate,\n    __param,\n    __metadata,\n    __awaiter,\n    __generator,\n    __createBinding,\n    __exportStar,\n    __values,\n    __read,\n    __spread,\n    __spreadArrays,\n    __spreadArray,\n    __await,\n    __asyncGenerator,\n    __asyncDelegator,\n    __asyncValues,\n    __makeTemplateObject,\n    __importStar,\n    __importDefault,\n    __classPrivateFieldGet,\n    __classPrivateFieldSet,\n    __classPrivateFieldIn,\n    __addDisposableResource,\n    __disposeResources\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanem/svg-injector/node_modules/tslib/tslib.es6.mjs\n");

/***/ })

};
;