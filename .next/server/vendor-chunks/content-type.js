"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/content-type";
exports.ids = ["vendor-chunks/content-type"];
exports.modules = {

/***/ "(ssr)/./node_modules/content-type/index.js":
/*!********************************************!*\
  !*** ./node_modules/content-type/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */ var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex\n;\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/ // eslint-disable-line no-control-regex\n;\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */ var QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g // eslint-disable-line no-control-regex\n;\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */ var QUOTE_REGEXP = /([\\\\\"])/g;\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */ var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n/**\n * Module exports.\n * @public\n */ exports.format = format;\nexports.parse = parse;\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */ function format(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        throw new TypeError(\"argument obj is required\");\n    }\n    var parameters = obj.parameters;\n    var type = obj.type;\n    if (!type || !TYPE_REGEXP.test(type)) {\n        throw new TypeError(\"invalid type\");\n    }\n    var string = type;\n    // append parameters\n    if (parameters && typeof parameters === \"object\") {\n        var param;\n        var params = Object.keys(parameters).sort();\n        for(var i = 0; i < params.length; i++){\n            param = params[i];\n            if (!TOKEN_REGEXP.test(param)) {\n                throw new TypeError(\"invalid parameter name\");\n            }\n            string += \"; \" + param + \"=\" + qstring(parameters[param]);\n        }\n    }\n    return string;\n}\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */ function parse(string) {\n    if (!string) {\n        throw new TypeError(\"argument string is required\");\n    }\n    // support req/res-like objects as argument\n    var header = typeof string === \"object\" ? getcontenttype(string) : string;\n    if (typeof header !== \"string\") {\n        throw new TypeError(\"argument string is required to be a string\");\n    }\n    var index = header.indexOf(\";\");\n    var type = index !== -1 ? header.slice(0, index).trim() : header.trim();\n    if (!TYPE_REGEXP.test(type)) {\n        throw new TypeError(\"invalid media type\");\n    }\n    var obj = new ContentType(type.toLowerCase());\n    // parse parameters\n    if (index !== -1) {\n        var key;\n        var match;\n        var value;\n        PARAM_REGEXP.lastIndex = index;\n        while(match = PARAM_REGEXP.exec(header)){\n            if (match.index !== index) {\n                throw new TypeError(\"invalid parameter format\");\n            }\n            index += match[0].length;\n            key = match[1].toLowerCase();\n            value = match[2];\n            if (value.charCodeAt(0) === 0x22 /* \" */ ) {\n                // remove quotes\n                value = value.slice(1, -1);\n                // remove escapes\n                if (value.indexOf(\"\\\\\") !== -1) {\n                    value = value.replace(QESC_REGEXP, \"$1\");\n                }\n            }\n            obj.parameters[key] = value;\n        }\n        if (index !== header.length) {\n            throw new TypeError(\"invalid parameter format\");\n        }\n    }\n    return obj;\n}\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */ function getcontenttype(obj) {\n    var header;\n    if (typeof obj.getHeader === \"function\") {\n        // res-like\n        header = obj.getHeader(\"content-type\");\n    } else if (typeof obj.headers === \"object\") {\n        // req-like\n        header = obj.headers && obj.headers[\"content-type\"];\n    }\n    if (typeof header !== \"string\") {\n        throw new TypeError(\"content-type header is missing from object\");\n    }\n    return header;\n}\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */ function qstring(val) {\n    var str = String(val);\n    // no need to quote tokens\n    if (TOKEN_REGEXP.test(str)) {\n        return str;\n    }\n    if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n        throw new TypeError(\"invalid parameter value\");\n    }\n    return '\"' + str.replace(QUOTE_REGEXP, \"\\\\$1\") + '\"';\n}\n/**\n * Class to represent a content type.\n * @private\n */ function ContentType(type) {\n    this.parameters = Object.create(null);\n    this.type = type;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/content-type/index.js\n");

/***/ })

};
;